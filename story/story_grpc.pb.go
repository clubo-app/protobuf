// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: story/story.proto

package story

import (
	context "context"
	common "github.com/clubo-app/protobuf/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StoryServiceClient is the client API for StoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoryServiceClient interface {
	CreateStory(ctx context.Context, in *CreateStoryRequest, opts ...grpc.CallOption) (*PublicStory, error)
	GetStory(ctx context.Context, in *GetStoryRequest, opts ...grpc.CallOption) (*PublicStory, error)
	DeleteStory(ctx context.Context, in *DeleteStoryRequest, opts ...grpc.CallOption) (*common.MessageResponse, error)
	GetByUser(ctx context.Context, in *GetByUserRequest, opts ...grpc.CallOption) (*PagedStories, error)
	GetByParty(ctx context.Context, in *GetByPartyRequest, opts ...grpc.CallOption) (*PagedStories, error)
	PresignURL(ctx context.Context, in *PresignURLRequest, opts ...grpc.CallOption) (*PresignURLResponse, error)
}

type storyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStoryServiceClient(cc grpc.ClientConnInterface) StoryServiceClient {
	return &storyServiceClient{cc}
}

func (c *storyServiceClient) CreateStory(ctx context.Context, in *CreateStoryRequest, opts ...grpc.CallOption) (*PublicStory, error) {
	out := new(PublicStory)
	err := c.cc.Invoke(ctx, "/story.StoryService/CreateStory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyServiceClient) GetStory(ctx context.Context, in *GetStoryRequest, opts ...grpc.CallOption) (*PublicStory, error) {
	out := new(PublicStory)
	err := c.cc.Invoke(ctx, "/story.StoryService/GetStory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyServiceClient) DeleteStory(ctx context.Context, in *DeleteStoryRequest, opts ...grpc.CallOption) (*common.MessageResponse, error) {
	out := new(common.MessageResponse)
	err := c.cc.Invoke(ctx, "/story.StoryService/DeleteStory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyServiceClient) GetByUser(ctx context.Context, in *GetByUserRequest, opts ...grpc.CallOption) (*PagedStories, error) {
	out := new(PagedStories)
	err := c.cc.Invoke(ctx, "/story.StoryService/GetByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyServiceClient) GetByParty(ctx context.Context, in *GetByPartyRequest, opts ...grpc.CallOption) (*PagedStories, error) {
	out := new(PagedStories)
	err := c.cc.Invoke(ctx, "/story.StoryService/GetByParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyServiceClient) PresignURL(ctx context.Context, in *PresignURLRequest, opts ...grpc.CallOption) (*PresignURLResponse, error) {
	out := new(PresignURLResponse)
	err := c.cc.Invoke(ctx, "/story.StoryService/PresignURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoryServiceServer is the server API for StoryService service.
// All implementations must embed UnimplementedStoryServiceServer
// for forward compatibility
type StoryServiceServer interface {
	CreateStory(context.Context, *CreateStoryRequest) (*PublicStory, error)
	GetStory(context.Context, *GetStoryRequest) (*PublicStory, error)
	DeleteStory(context.Context, *DeleteStoryRequest) (*common.MessageResponse, error)
	GetByUser(context.Context, *GetByUserRequest) (*PagedStories, error)
	GetByParty(context.Context, *GetByPartyRequest) (*PagedStories, error)
	PresignURL(context.Context, *PresignURLRequest) (*PresignURLResponse, error)
	mustEmbedUnimplementedStoryServiceServer()
}

// UnimplementedStoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStoryServiceServer struct {
}

func (UnimplementedStoryServiceServer) CreateStory(context.Context, *CreateStoryRequest) (*PublicStory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStory not implemented")
}
func (UnimplementedStoryServiceServer) GetStory(context.Context, *GetStoryRequest) (*PublicStory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStory not implemented")
}
func (UnimplementedStoryServiceServer) DeleteStory(context.Context, *DeleteStoryRequest) (*common.MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStory not implemented")
}
func (UnimplementedStoryServiceServer) GetByUser(context.Context, *GetByUserRequest) (*PagedStories, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByUser not implemented")
}
func (UnimplementedStoryServiceServer) GetByParty(context.Context, *GetByPartyRequest) (*PagedStories, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByParty not implemented")
}
func (UnimplementedStoryServiceServer) PresignURL(context.Context, *PresignURLRequest) (*PresignURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PresignURL not implemented")
}
func (UnimplementedStoryServiceServer) mustEmbedUnimplementedStoryServiceServer() {}

// UnsafeStoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoryServiceServer will
// result in compilation errors.
type UnsafeStoryServiceServer interface {
	mustEmbedUnimplementedStoryServiceServer()
}

func RegisterStoryServiceServer(s grpc.ServiceRegistrar, srv StoryServiceServer) {
	s.RegisterService(&StoryService_ServiceDesc, srv)
}

func _StoryService_CreateStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryServiceServer).CreateStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/story.StoryService/CreateStory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryServiceServer).CreateStory(ctx, req.(*CreateStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoryService_GetStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryServiceServer).GetStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/story.StoryService/GetStory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryServiceServer).GetStory(ctx, req.(*GetStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoryService_DeleteStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryServiceServer).DeleteStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/story.StoryService/DeleteStory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryServiceServer).DeleteStory(ctx, req.(*DeleteStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoryService_GetByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryServiceServer).GetByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/story.StoryService/GetByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryServiceServer).GetByUser(ctx, req.(*GetByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoryService_GetByParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryServiceServer).GetByParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/story.StoryService/GetByParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryServiceServer).GetByParty(ctx, req.(*GetByPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoryService_PresignURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresignURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryServiceServer).PresignURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/story.StoryService/PresignURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryServiceServer).PresignURL(ctx, req.(*PresignURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StoryService_ServiceDesc is the grpc.ServiceDesc for StoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "story.StoryService",
	HandlerType: (*StoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStory",
			Handler:    _StoryService_CreateStory_Handler,
		},
		{
			MethodName: "GetStory",
			Handler:    _StoryService_GetStory_Handler,
		},
		{
			MethodName: "DeleteStory",
			Handler:    _StoryService_DeleteStory_Handler,
		},
		{
			MethodName: "GetByUser",
			Handler:    _StoryService_GetByUser_Handler,
		},
		{
			MethodName: "GetByParty",
			Handler:    _StoryService_GetByParty_Handler,
		},
		{
			MethodName: "PresignURL",
			Handler:    _StoryService_PresignURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "story/story.proto",
}
